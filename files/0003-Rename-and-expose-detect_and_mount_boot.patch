From 2b453d360c48a07db538aa884fdd4a67844eda25 Mon Sep 17 00:00:00 2001
From: Silke Hofstra <silke@slxh.eu>
Date: Sat, 22 Aug 2020 15:56:08 +0200
Subject: [PATCH 3/5] Rename and expose detect_and_mount_boot

---
 src/bootman/bootman.c         | 6 +++---
 src/bootman/bootman.h         | 7 +++++++
 src/bootman/bootman_private.h | 2 +-
 src/bootman/update.c          | 2 +-
 4 files changed, 12 insertions(+), 5 deletions(-)

diff --git a/src/bootman/bootman.c b/src/bootman/bootman.c
index da7e25f..324ae38 100644
--- a/src/bootman/bootman.c
+++ b/src/bootman/bootman.c
@@ -330,7 +330,7 @@ bool boot_manager_remove_kernel(BootManager *self, const Kernel *kernel)
         return self->bootloader->remove_kernel(self, kernel);
 }
 
-int detect_and_mount_boot(BootManager *self, char **boot_dir) {
+int boot_manager_detect_and_mount_boot(BootManager *self, char **boot_dir) {
         autofree(char) *boot_dev = NULL;
         const char *prefix;
         int wanted_boot_mask;
@@ -371,7 +371,7 @@ bool boot_manager_set_default_kernel(BootManager *self, const Kernel *kernel)
         CHECK_ERR_RET_VAL(!kernels || kernels->len == 0, false,
                           "No kernels discovered in %s, bailing", self->kernel_dir);
 
-        did_mount = detect_and_mount_boot(self, &boot_dir);
+        did_mount = boot_manager_detect_and_mount_boot(self, &boot_dir);
         CHECK_DBG_RET_VAL(did_mount < 0, false, "Boot was not mounted");
 
         for (uint16_t i = 0; i < kernels->len; i++) {
@@ -566,7 +566,7 @@ char **boot_manager_list_kernels(BootManager *self)
         /* Sort them to ensure static ordering */
         nc_array_qsort(kernels, kernel_compare_reverse);
 
-        did_mount = detect_and_mount_boot(self, &boot_dir);
+        did_mount = boot_manager_detect_and_mount_boot(self, &boot_dir);
         if (did_mount >= 0) {
                 default_kernel = boot_manager_get_default_kernel(self);
                 if (did_mount > 0) {
diff --git a/src/bootman/bootman.h b/src/bootman/bootman.h
index db45eab..53e0811 100644
--- a/src/bootman/bootman.h
+++ b/src/bootman/bootman.h
@@ -287,6 +287,13 @@ bool boot_manager_set_default_kernel(BootManager *manager, const Kernel *kernel)
  */
 char *boot_manager_get_default_kernel(BootManager *manager);
 
+/**
+ * Detect and mount the boot directory.
+ * @param boot_dir Path indicating the mounted boot directory.
+ * @return an integer value, indicating success or failure.
+ */
+int boot_manager_detect_and_mount_boot(BootManager *self, char **boot_dir);
+
 /**
  * Return the CbmDeviceProbe for the root partition
  *
diff --git a/src/bootman/bootman_private.h b/src/bootman/bootman_private.h
index 4d9f67e..89ac241 100644
--- a/src/bootman/bootman_private.h
+++ b/src/bootman/bootman_private.h
@@ -71,7 +71,7 @@ int mount_boot(BootManager *self, char **boot_directory);
  *
  * @see mount_boot() for return and error conditions.
  */
-int detect_and_mount_boot(BootManager *self, char **boot_dir);
+int boot_manager_detect_and_mount_boot(BootManager *self, char **boot_dir);
 
 /**
  * Internal function to sort by Kernel structs by release number (highest first)
diff --git a/src/bootman/update.c b/src/bootman/update.c
index b9c06bb..15538c8 100644
--- a/src/bootman/update.c
+++ b/src/bootman/update.c
@@ -41,7 +41,7 @@ bool boot_manager_update(BootManager *self)
                 return boot_manager_update_image(self);
         }
 
-        did_mount = detect_and_mount_boot(self, &boot_dir);
+        did_mount = boot_manager_detect_and_mount_boot(self, &boot_dir);
         if (did_mount >= 0) {
                 /* Do a native update */
                 ret = boot_manager_update_native(self);
-- 
2.39.0

