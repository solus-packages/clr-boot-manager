From 4a6aaf2859b8b19d5993d048aff3eb4cc8e6fd14 Mon Sep 17 00:00:00 2001
From: Silke Hofstra <silke@slxh.eu>
Date: Wed, 30 Dec 2020 19:38:22 +0100
Subject: [PATCH 2/5] bootman: only do partitionless boot when the bootloader
 supports it

#174 restored support for partitionless /boot. However, this
introduced issues when (for whatever reason) there is content in
the /boot directory (instead of being empty) (see #175).

As partitionless boot is not an option for every bootloader, add a flag
indication bootloader support. Bootloaders without partitionless support
(and those on UEFI) will never try to use a partitionless /boot.
---
 src/bootloaders/bootloader.h  | 13 +++++++------
 src/bootloaders/extlinux.c    |  3 ++-
 src/bootloaders/grub2.c       |  2 +-
 src/bootloaders/syslinux.c    |  3 ++-
 src/bootman/bootman.c         | 13 ++++++++++---
 src/bootman/bootman_private.h |  9 +++++++++
 6 files changed, 31 insertions(+), 12 deletions(-)

diff --git a/src/bootloaders/bootloader.h b/src/bootloaders/bootloader.h
index 00dd1e5..63c6f72 100644
--- a/src/bootloaders/bootloader.h
+++ b/src/bootloaders/bootloader.h
@@ -35,12 +35,13 @@ typedef int (*boot_loader_caps)(const BootManager *);
 
 typedef enum {
         BOOTLOADER_CAP_MIN = 1 << 0,
-        BOOTLOADER_CAP_UEFI = 1 << 1,   /**<Bootloader supports UEFI */
-        BOOTLOADER_CAP_GPT = 1 << 2,    /**<Bootloader supports GPT boot partition */
-        BOOTLOADER_CAP_LEGACY = 1 << 3, /**<Bootloader supports legacy boot */
-        BOOTLOADER_CAP_EXTFS = 1 << 4,  /**<Bootloader supports ext2/3/4 */
-        BOOTLOADER_CAP_FATFS = 1 << 5,  /**<Bootloader supports vfat */
-        BOOTLOADER_CAP_MAX = 1 << 6
+        BOOTLOADER_CAP_UEFI = 1 << 1,    /**<Bootloader supports UEFI */
+        BOOTLOADER_CAP_GPT = 1 << 2,     /**<Bootloader supports GPT boot partition */
+        BOOTLOADER_CAP_LEGACY = 1 << 3,  /**<Bootloader supports legacy boot */
+        BOOTLOADER_CAP_EXTFS = 1 << 4,   /**<Bootloader supports ext2/3/4 */
+        BOOTLOADER_CAP_FATFS = 1 << 5,   /**<Bootloader supports vfat */
+        BOOTLOADER_CAP_PARTLESS = 1<< 6, /**<Bootloader supports partitionless boot */
+        BOOTLOADER_CAP_MAX = 1 << 7
 } BootLoaderCapability;
 
 /**
diff --git a/src/bootloaders/extlinux.c b/src/bootloaders/extlinux.c
index 9d0d89e..3aa957c 100644
--- a/src/bootloaders/extlinux.c
+++ b/src/bootloaders/extlinux.c
@@ -86,7 +86,8 @@ static int extlinux_get_capabilities(const BootManager *manager)
                 return 0;
         }
 
-        return BOOTLOADER_CAP_GPT | BOOTLOADER_CAP_LEGACY | BOOTLOADER_CAP_EXTFS;
+        return BOOTLOADER_CAP_GPT | BOOTLOADER_CAP_LEGACY | BOOTLOADER_CAP_EXTFS |
+               BOOTLOADER_CAP_PARTLESS;
 }
 
 __cbm_export__ const BootLoader extlinux_bootloader = {.name = "extlinux",
diff --git a/src/bootloaders/grub2.c b/src/bootloaders/grub2.c
index f70dfd0..519d160 100644
--- a/src/bootloaders/grub2.c
+++ b/src/bootloaders/grub2.c
@@ -581,7 +581,7 @@ int grub2_get_capabilities(const BootManager *manager)
                 return 0;
         }
         /* Or in other words, we're the last bootloader candidate. */
-        return BOOTLOADER_CAP_LEGACY | BOOTLOADER_CAP_EXTFS;
+        return BOOTLOADER_CAP_LEGACY | BOOTLOADER_CAP_EXTFS | BOOTLOADER_CAP_PARTLESS;
 }
 
 __cbm_export__ const BootLoader grub2_bootloader = {.name = "grub2",
diff --git a/src/bootloaders/syslinux.c b/src/bootloaders/syslinux.c
index 02a1805..ff7b3c5 100644
--- a/src/bootloaders/syslinux.c
+++ b/src/bootloaders/syslinux.c
@@ -88,7 +88,8 @@ static int syslinux_get_capabilities(const BootManager *manager)
                 return 0;
         }
 
-        return BOOTLOADER_CAP_GPT | BOOTLOADER_CAP_LEGACY | BOOTLOADER_CAP_FATFS;
+        return BOOTLOADER_CAP_GPT | BOOTLOADER_CAP_LEGACY | BOOTLOADER_CAP_FATFS |
+               BOOTLOADER_CAP_PARTLESS;
 }
 
 __cbm_export__ const BootLoader syslinux_bootloader = {.name = "syslinux",
diff --git a/src/bootman/bootman.c b/src/bootman/bootman.c
index 6cf1d17..da7e25f 100644
--- a/src/bootman/bootman.c
+++ b/src/bootman/bootman.c
@@ -461,10 +461,9 @@ int mount_boot(BootManager *self, char **boot_directory)
 
         /*
          * Already mounted at the default boot dir or boot doesn't have its own partition,
-         * we check if /boot is empty, if it's not then we assume it's a "partitionless" /boot
-         * (the system has no /boot partition), in both cases there's nothing for us to do
+         * in both cases there's nothing for us to do.
          */
-        if (cbm_system_is_mounted(boot_dir) || !cbm_is_dir_empty(boot_dir)) {
+        if (cbm_system_is_mounted(boot_dir) || check_partitionless_boot(self, boot_dir)) {
                 LOG_INFO("boot_dir is already mounted: %s", boot_dir);
                 *boot_directory = strdup(boot_dir);
                 if (*boot_directory) {
@@ -1037,6 +1036,14 @@ bool boot_manager_is_update_efi_vars(BootManager *self)
         return self->update_efi_vars;
 }
 
+bool check_partitionless_boot(const BootManager *self, const char *boot_dir)
+{
+        assert(self != NULL);
+        return ((self->bootloader->get_capabilities(self) & BOOTLOADER_CAP_PARTLESS)
+                && !(self->sysconfig->wanted_boot_mask & BOOTLOADER_CAP_UEFI)
+                && !cbm_is_dir_empty(boot_dir));
+}
+
 /*
  * Editor modelines  -  https://www.wireshark.org/tools/modelines.html
  *
diff --git a/src/bootman/bootman_private.h b/src/bootman/bootman_private.h
index cd0b14f..4d9f67e 100644
--- a/src/bootman/bootman_private.h
+++ b/src/bootman/bootman_private.h
@@ -83,6 +83,15 @@ int kernel_compare_reverse(const void *a, const void *b);
  */
 const char *cbm_get_fstype_name(const char *boot_device);
 
+/**
+ * Check if the system supports a "partitionless" (the system has no /boot partition) boot.
+ * Conditions are:
+ * - The bootloader supports this.
+ * - The system is not UEFI.
+ * - The /boot folder is not empty.
+ */
+bool check_partitionless_boot(const BootManager *self, const char *boot_dir);
+
 /*
  * Editor modelines  -  https://www.wireshark.org/tools/modelines.html
  *
-- 
2.39.0

